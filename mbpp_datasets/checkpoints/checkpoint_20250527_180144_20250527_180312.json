{
  "last_completed_idx": 5,
  "total_processed": 6,
  "correct_solutions": 1,
  "incorrect_solutions": 5,
  "failed_records": [],
  "results": [
    {
      "task_id": 11,
      "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n\n# Your code here",
      "generated_code": "def remove_Occ(string,char):\n    string = string.replace(char,\"\")\n    return string",
      "is_correct": true,
      "passed_tests": 3,
      "total_tests": 3,
      "success_rate": 100.0,
      "test_errors": [],
      "generation_time": 7.695743083953857
    },
    {
      "task_id": 12,
      "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\n# Your code here",
      "generated_code": "def sort_matrix(matrix):\n    for i in range(len(matrix)):\n        matrix[i].sort()\n    return matrix",
      "is_correct": false,
      "passed_tests": 0,
      "total_tests": 3,
      "success_rate": 0.0,
      "test_errors": [],
      "generation_time": 6.136496067047119
    },
    {
      "task_id": 13,
      "prompt": "Write a function to count the most common words in a dictionary.\n\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n\n# Your code here",
      "generated_code": "def count_common(dictionary):\n    count = {}\n    for word in dictionary:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    return count.items()\n\n# Test your code\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
      "is_correct": false,
      "passed_tests": 0,
      "total_tests": 3,
      "success_rate": 0.0,
      "test_errors": [
        "Code execution failed: "
      ],
      "generation_time": 48.661755323410034
    },
    {
      "task_id": 14,
      "prompt": "Write a python function to find the volume of a triangular prism.\n\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n\n# Your code here",
      "generated_code": "def find_Volume(base, height, width):\n    return base * height * width",
      "is_correct": false,
      "passed_tests": 0,
      "total_tests": 3,
      "success_rate": 0.0,
      "test_errors": [],
      "generation_time": 3.8334410190582275
    },
    {
      "task_id": 15,
      "prompt": "Write a function to split a string at lowercase letters.\n\nassert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n\n# Your code here",
      "generated_code": "def split_lowerstring(string):\n    return [word.lower() for word in string.split()]",
      "is_correct": false,
      "passed_tests": 0,
      "total_tests": 3,
      "success_rate": 0.0,
      "test_errors": [],
      "generation_time": 4.951304912567139
    },
    {
      "task_id": 16,
      "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\n\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\n\n# Your code here",
      "generated_code": "def text_lowercase_underscore(text):\n    if len(text) == 0:\n        return 'Found a match!'\n    elif len(text) == 1:\n        return 'Not matched!'\n    else:\n        if text[0].islower():\n            return text_lowercase_underscore(text[1:])\n        else:\n            return text_lowercase_underscore(text[1:]) + '_' + text[0]",
      "is_correct": false,
      "passed_tests": 0,
      "total_tests": 3,
      "success_rate": 0.0,
      "test_errors": [],
      "generation_time": 16.824050188064575
    }
  ],
  "timestamp": "2025-05-27T18:03:12.702041",
  "config": {
    "checkpoint_frequency": 5,
    "checkpoint_dir": "checkpoints",
    "autosave_frequency": 100,
    "autosave_keep_last": 3,
    "max_retries": 3,
    "retry_backoff": 1.0,
    "continue_on_error": true,
    "memory_cleanup_frequency": 100,
    "gc_collect_frequency": 50,
    "progress_log_frequency": 10,
    "show_progress_bar": true,
    "max_memory_usage_gb": 100.0,
    "max_gpu_memory_usage_gb": 30.0,
    "enable_timing_stats": true,
    "timeout_per_record": 300.0
  }
}